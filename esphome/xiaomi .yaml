#192.168.0.40
esphome:
  name: xiaomi
  friendly_name: Xiaomi
  on_boot:
    then:
      - if:
          condition:
            binary_sensor.is_on: sens_state
          then:
            - logger.log: "Телевизор включен,включаю подсветку"  
            - light.turn_on: 
                id: lighten
                brightness: 40%
                green: 60%
                red: 100%
                blue: 15%

              # если включить то будет моргать.  
          # else:
          #     - repeat:
          #         count: 5
          #         then:
          #           - light.turn_on: lighten
          #           - delay: 3s
          #           - light.turn_off: lighten
          #           - delay: 3s
                 

     

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:


ota:
  password: "846e63a45ee74634ddd3206f21b8fd78"

wifi: 
  ssid: !secret wifi_ssid 
  password: !secret wifi_password
  use_address: 192.168.0.40
#  power_save_mode: HIGH
  
  
  

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Xiaomi Fallback Hotspot"
    password: "sS0Nw1vLO4oe"

captive_portal:

web_server:
  port: 80

#прокси
#bluetooth_proxy:
  #active: true

#esp32_ble_tracker:
#xiaomi_ble:

i2c:
  sda: 21
  scl: 22
  frequency: 10kHz
  scan: true
  id: bus_a 


button:
  - platform: restart
    name: "Restart"  

sensor:

 
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s 
    

  - platform: uptime
    id: device_uptime
      #    internal: true


  - platform: iaqcore
    i2c_id: bus_a
    address: 0x5A
    update_interval: 20s
    co2:
      name: "iAQ Core CO2 Sensor"
      id: co2
      state_class: measurement
    tvoc:
      name: "iAQ Core TVOC Sensor"

      on_value:
        - if:
            condition:
              binary_sensor.is_on: sens_state
            then:
              - if: 
                  condition:    
                    sensor.in_range:
                      id: co2 
                      above: 450.0
                      below: 600.0      
                  then:
                   - light.control: 
                      id: lighten
                      #brightness: 40%
                      green: 100%
                      red: 0%
                      blue: 0%
              - if: 
                  condition:    
                    sensor.in_range:
                      id: co2 
                      above: 600.0
                      below: 800.0      
                  then:
                   - light.control: 
                      id: lighten
                      #brightness: 40%
                      green: 0%
                      red: 0%
                      blue: 100%
              - if: 
                  condition:    
                    sensor.in_range:
                      id: co2 
                      above: 800.0
                     # below: 800.0      
                  then:
                   - light.control: 
                      id: lighten
                      #brightness: 40%
                      green: 60%
                      red: 100%
                      blue: 15%                                 

text_sensor:
  - platform: template
    name: "Uptime"
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
          return { (String(minutes) + " мин.").c_str() };
        } 
    update_interval: 60s
    icon: mdi:clock-start                     
 
 
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO23
      inverted: false
      mode:
         input: true
         pullup: true
    name: "Состояние телевизора" 
    id: sens_state
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_off: sens_state
            then:
              - light.turn_off: lighten
              - logger.log: "Выключен по состоянию телевизор отключен"
        - if:
            condition:
              binary_sensor.is_on: sens_state
            then:
              - logger.log: "Включен по состоянию телевизор включен"
              - light.turn_on: 
                  id: lighten
                  brightness: 40%
                  green: 60%
                  red: 100%
                  blue: 15%

  
                  
     
       
# Example configuration entry

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO2
    num_leds: 192
    color_correct: [60%, 60%, 60%]
    #restore_mode: "Мой рандом"
    name: "Подсветка телевизора"
    default_transition_length: 5s
    id: lighten
    
  

    effects:
      - addressable_rainbow:
          name: Радуга
      - addressable_rainbow:
          name: Моя радуга
          speed: 5
          width: 200
  
      - random:
          name: "Рандом"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Мой рандом"
          transition_length: 5s
          update_interval: 10s



   
   
   


