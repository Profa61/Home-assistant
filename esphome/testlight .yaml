esphome:
  name: testlight
  friendly_name: Lights Kitchen
  includes:
    - uart_read_line_sensor_ld2410v3.h
  on_boot:
    priority: -100
    then:
      - script.execute: get_config
      - if:
          condition:
            binary_sensor.is_on: mmwave_presence_ld2410
          then:
            - light.turn_on: 
                id: mylight
                brightness: 40%


esp8266:
  board: d1_mini


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "2lLOScz8uMNfEQybfWuKejp3Qw6HPkKArPvTF6reXAU="

ota:
  password: "3d5ef08603c684dc16a967c6518c33a6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password



  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Testlight Fallback Hotspot"
    password: "Ae32srAueLVd"

captive_portal:
web_server:
  port: 80


uart:
  id: uart_bus
  tx_pin:
    number: TX
  rx_pin: 
    number: RX
  baud_rate: 256000
  parity: NONE
  stop_bits: 1


globals:
  - id: sun_is_down
    type: bool
    restore_value: true
    initial_value: 'false'


sun:
  latitude: 55.1166117426196°
  longitude: 82.93150875782807°


time:
  - platform: homeassistant
    id: ntp
    on_time:
        - seconds: 00
          minutes: 30
          hours: 8
          #days_of_week: MON-FRI
          then:
          - logger.log: "ПРОВЕРКА ВРЕМЕНИ ДЕНЬ/n"               
          - globals.set:
              id: sun_is_down
              value: 'false'
          - logger.log:
              format: "СОСТОЯНИЕ НОЧЬ %X"
              args: [ 'id(sun_is_down)' ]                         
        - seconds: 00
          minutes: 30
          hours: 22
          #days_of_week: MON-FRI
          then:
           - logger.log: "ПРОВЕРКА ВРЕМЕНИ НОЧЬ/n"            
           - globals.set:
              id: sun_is_down
              value: 'true'
           - logger.log:
              format: "СОСТОЯНИЕ НОЧЬ %X"
              args: [ 'id(sun_is_down)' ]

    on_time_sync:
      then:
       - logger.log: "Синхронизация времени успешна!/n"
       - logger.log:
           format: "СОСТОЯНИЕ НОЧЬ %X"
           args: [ 'id(sun_is_down)' ]       


switch:
  - platform: safe_mode
    name: use_safe_mode
    
  - platform: template
    name: configmode
    id: configmode
    optimistic: true
    # assumed_state: false
    turn_on_action:
      # - switch.turn_off: engineering_mode
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
      - delay: 100ms
      - script.execute: clear_targets
    turn_off_action:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(false);'

  - platform: template
    name: show_target_stats
    id: show_stats
    optimistic: true
    internal: true
    turn_off_action:
      - script.execute: clear_targets

  - platform: gpio
    pin: GPIO2
    restore_mode: RESTORE_DEFAULT_ON
    name: autosvet
    id: autos


text_sensor:
  - platform: template
    name: uptime_human_readable
    id: uptime_human_readable
    icon: mdi:clock-start
    update_interval: 60s

  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
  - platform: sun
    name: Sun Next Sunset
    type: sunset        


light:
  - platform: monochromatic
    name: "TestLights"
    output: output_component1
    default_transition_length: 2.0s
    id: mylight
   # gamma_correct: 9.6

# Example output entry
output:
  - platform: esp8266_pwm
    id: output_component1
    pin: GPIO12


sensor:

  - platform: uptime
    name: uptime_sensor
    id: uptime_sensor
    update_interval: 60s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human_readable
            state: !lambda |-
                      int seconds = round(id(uptime_sensor).raw_state);
                      int days = seconds / (24 * 3600);
                      seconds = seconds % (24 * 3600);
                      int hours = seconds / 3600;
                      seconds = seconds % 3600;
                      int minutes = seconds /  60;
                      seconds = seconds % 60;
                      return (
                        (days ? to_string(days)+":" : "00:") +
                        (hours ? to_string(hours)+":" : "00:") +
                        (minutes ? to_string(minutes)+":" : "00:") +
                        (to_string(seconds))
                      ).c_str();


  - platform: custom # currently crashes ESP32
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      //return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
      return {};
    sensors:
         
    
  - platform: template
    name: movingTargetDistance
    id: movingTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: movingTargetEnergy
    id: movingTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: stillTargetDistance
    id: stillTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: stillTargetEnergy
    id: stillTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: detectDistance
    id: detectDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true

  - platform: resistance
    sensor: source_sensor
    configuration: UPSTREAM
    resistor: 4.6kOhm
    id: resist
    accuracy_decimals: 0
    unit_of_measurement: lux"
    name: luxmeter
    on_value:
      - if:
          condition:
          - lambda: |-
              return id(sun_is_down) == false;                
          - light.is_on: mylight
          - lambda: 'return id(autos).state == true;'                    
          then:
            - logger.log:
                 format: "СОСТОЯНИЕ НОЧЬ %X"
                 args: [ 'id(sun_is_down)' ]

            - if: 
                condition:               
                - sensor.in_range:
                    id: resist 
                    #above: 0
                    below: 5      
                then:
                 - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 65%/n" 
                 - light.control: 
                    id: mylight
                    brightness: 65%

            - if: 
                condition:    
                  sensor.in_range:
                    id: resist 
                    above: 5
                    below: 20      
                then:
                 - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 85%/n" 
                 - light.control: 
                    id: mylight
                    brightness: 85%

            - if: 
                condition:    
                  sensor.in_range:
                    id: resist 
                    above: 20
                    #below: 15      
                then:
                 - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 100%/n" 
                 - light.control: 
                    id: mylight
                    brightness: 100% 

            # - if: 
            #     condition:    
            #       sensor.in_range:
            #         id: resist 
            #         above: 15
            #         below: 30      
            #     then:
            #      - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 60%/n" 
            #      - light.control: 
            #         id: mylight
            #         brightness: 70%

            # - if: 
            #     condition:    
            #       sensor.in_range:
            #         id: resist 
            #         above: 30
            #         below: 50      
            #     then:
            #      - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 50%/n" 
            #      - light.control: 
            #         id: mylight
            #         brightness: 70%

            # - if: 
            #     condition:    
            #       sensor.in_range:
            #         id: resist 
            #         above: 50
            #         #below: 30      
            #     then:
            #      - logger.log: "ВО ВРЕМЯ РАБОТЫ НА 40%/n" 
            #      - light.control: 
            #         id: mylight
            #         brightness: 70%

      - if:
          condition:
          - lambda: |-
              return id(sun_is_down) == true;                
          - light.is_on: mylight
          - lambda: 'return id(autos).state == true;'          
          then:
            - logger.log:
                 format: "СОСТОЯНИЕ НОЧЬ %X"
                 args: [ 'id(sun_is_down)' ]
            - logger.log: "НОЧНОЙ РЕЖИМ НА 20%/n" 
            - light.control: 
                id: mylight
                brightness: 20%                                      
 

# Example source sensor:
  - platform: adc
    id: source_sensor
    update_interval: 10s
    pin: A0
  #  attenuation: 11dB
    filters:
     # - lambda: return 27 - (x - 0.706f) / 0.001721f;
       - offset:  2.3  #2.0
      # - multiply: 2.0#1.1
      
 
custom_component:
  - lambda: |-
      return {new LD2410(id(uart_bus))};
    components:
      - id: ld2410


binary_sensor:
  - platform: gpio
    name: table lighting
    id: mmwave_presence_ld2410
    pin: GPIO13
    device_class: motion
    on_state:
      then:
        - if: 
            condition: 
              - binary_sensor.is_off: mmwave_presence_ld2410
              - lambda: 'return id(autos).state == true;'              
            then: 
              - delay: 150ms
              - script.execute: clear_targets
              - light.turn_off: mylight

            else:
            - component.update: source_sensor  
            
            - if:
                condition:
                 - lambda: 'return id(sun_is_down) == false;' 
                 - switch.is_on: autos
                 - sensor.in_range:
                    id: resist
                    #above: 0
                    below: 5      
                then:
                 - logger.log: "ПО ДВИЖЕНИЮ 65%/n" 
                 - light.turn_on: 
                    id: mylight
                    brightness: 65%
                  
            - if: 
                condition:
                 - lambda: 'return id(sun_is_down) == false;'     
                 - switch.is_on: autos
                 - sensor.in_range:
                    id: resist 
                    above: 5
                    below: 20      
                then:
                 - logger.log: "ПО ДВИЖЕНИЮ 85%/n"  
                 - light.turn_on: 
                    id: mylight
                    brightness: 85%

            - if: 
                condition:
                 - lambda: 'return id(sun_is_down) == false;'      
                 - switch.is_on: autos
                 - sensor.in_range:
                    id: resist 
                    above: 20
                    #below: 15      
                then:
                 - logger.log: "ПО ДВИЖЕНИЮ 90%/n" 
                 - light.turn_on: 
                    id: mylight
                    brightness: 100% 

            # - if: 
            #     condition:
            #      - lambda: 'return id(sun_is_down) == false;'   
            #      - switch.is_on: autos
            #      - sensor.in_range:
            #         id: resist 
            #         above: 15
            #         below: 30      
            #     then:
            #      - logger.log: "ПО ДВИЖЕНИЮ 60%/n" 
            #      - light.turn_on: 
            #         id: mylight
            #         brightness: 70%

            # - if: 
            #     condition:
            #      - lambda: 'return id(sun_is_down) == false;'  
            #      - switch.is_on: autos
            #      - sensor.in_range:
            #         id: resist 
            #         above: 30
            #         below: 50      
            #     then:
            #      - logger.log: "ПО ДВИЖЕНИЮ 85%/n" 
            #      - light.turn_on: 
            #         id: mylight
            #         brightness: 70%
                    
            # - if: 
            #     condition:
            #      - lambda: 'return id(sun_is_down) == false;'       
            #      - switch.is_on: autos
            #      - sensor.in_range:
            #         id: resist 
            #         above: 50
            #         #below: 30      
            #     then:
            #      - logger.log: "ПО ДВИЖЕНИЮ 40%/n" 
            #      - light.turn_on: 
            #         id: mylight
            #         brightness: 70%

        - if: 
            condition: 
              - binary_sensor.is_on: mmwave_presence_ld2410
              - lambda: 'return id(autos).state == true;'
              - lambda: 'return id(sun_is_down) == true;'              
            then: 
              - logger.log: "НОЧНОЙ РЕЖИМ НА 20%/n" 
              - light.turn_on: 
                  id: mylight
                  brightness: 20%   


number:  
  - platform: template
    name: configMaxDistance
    id: maxconfigDistance
    unit_of_measurement: "M"
    min_value: 0.75
    max_value: 6
    step: 0.75
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(x/0.75,x/0.75,id(noneDuration).state);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode


  - platform: template
    name: "sensitivity_threshold_(%)"
    id: allSensitivity
    min_value: 10
    max_value: 100
    step: 5
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setAllSensitivity(x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode
      

  - platform: template
    name: "motion_hold_(sec)"
    id: noneDuration
    min_value: 0
    max_value: 900
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(id(maxconfigDistance).state, id(maxconfigDistance).state, x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode


button:
  - platform: restart
    name: "reset/restart_ESP/MCU"
    entity_category: diagnostic
    on_press:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->factoryReset();'
      - delay: 150ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
      - delay: 150ms

script:
  - id: get_config
    then:
      - switch.turn_on: configmode
      - delay: 500ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 500ms
      - switch.turn_off: configmode
      
  - id: clear_targets
    then:
      - lambda: |-
          //id(hasTarget).publish_state(0);
          //id(hasMovingTarget).publish_state(0);
          //id(hasStillTarget).publish_state(0);
          id(movingTargetDistance).publish_state(0);
          id(movingTargetEnergy).publish_state(0);
          id(stillTargetDistance).publish_state(0);
          id(stillTargetEnergy).publish_state(0);
          id(detectDistance).publish_state(0);